{"version":3,"sources":["components/Input.js","components/Weather.js","components/AnimatedLeaf.js","components/App.js","serviceWorker.js","index.js"],"names":["Input","_ref","option","change","submit","react_default","a","createElement","className","onSubmit","name","value","onChange","type","Weather","props","weather","map","city","key","id","cityName","sys","country","description","main","temp","toFixed","humidity","pressure","wind","speed","src","concat","icon","alt","class","AnimatedLeaf","state","leafs","leafRender","i","window","innerWidth","leaf","document","Math","floor","random","style","top","left","animationDelay","animationDuration","color","body","appendChild","this","Fragment","Component","WeatherApp","weatherSectionClass","handleOptionChange","e","_this","setState","target","handleWeatherRender","preventDefault","querySelector","options","selectedIndex","text","fetch","then","resp","json","data","components_Input","components_Weather","components_AnimatedLeaf","Boolean","location","hostname","match","ReactDOM","render","App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d0bed6bb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/input.sass\";\r\n\r\nconst Input = ({ option, change, submit }) => {\r\n  return (\r\n    <form className=\"form\" onSubmit={submit}>\r\n      <p>Choose a city:</p>\r\n      <select name=\"cities\" value={option} onChange={change}>\r\n        <option value=\"Powiat warszawski zachodni\">Warsaw</option>\r\n        <option value=\"Powiat radomski\">Radom</option>\r\n        <option value=\"Powiat krakowski\">Kraków</option>\r\n        <option value=\"Powiat łódzki wschodni\">Łódź</option>\r\n        <option value=\"Powiat wrocławski\">Wrocław</option>\r\n        <option value=\"Powiat poznański\">Poznań</option>\r\n        <option value=\"Powiat gdański\">Gdańsk</option>\r\n        <option value=\"Powiat szczecinecki\">Szczecin</option>\r\n        <option value=\"Powiat lubliniecki\">Lublin</option>\r\n        <option value=\"Powiat białostocki\">Białystok</option>\r\n      </select>\r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport \"../styles/weather.sass\";\r\n\r\nconst Weather = props => {\r\n  const weather = props.weather.map(city => {\r\n    return (\r\n      <div key={city.id} className=\"results\">\r\n        <h2>\r\n          Weather for: {props.cityName}, {city.sys.country}\r\n        </h2>\r\n        <ul>\r\n          <li>Description: {city.weather[0].description}</li>\r\n          <li>Temperature: {city.main.temp.toFixed()} C</li>\r\n          <li>humidity: {city.main.humidity} %</li>\r\n          <li>Pressure: {city.main.pressure} hpa</li>\r\n          <li>Wind speed: {city.wind.speed} m/s</li>\r\n          <img\r\n            src={`http://openweathermap.org/img/wn/${\r\n              city.weather[0].icon\r\n            }@2x.png`}\r\n            alt=\"weather icon\"\r\n          />\r\n        </ul>\r\n      </div>\r\n    );\r\n  });\r\n  return <section className={props.class}>{weather}</section>;\r\n};\r\n\r\nexport default Weather;\r\n","import React, { Component } from \"react\";\r\nimport \"../styles/app.sass\";\r\n\r\nclass AnimatedLeaf extends Component {\r\n  state = {\r\n    leafs: []\r\n  };\r\n  componentDidMount() {\r\n    this.leafRender();\r\n  }\r\n  leafRender = () => {\r\n    for (let i = 0; i < `${window.innerWidth > 1200 ? 30 : 0}`; i++) {\r\n      const leafs = [\r\n        \"fas fa-leaf\",\r\n        \"fab fa-canadian-maple-leaf\",\r\n        \"fab fa-envira\",\r\n        \"fab fa-pagelines\"\r\n      ];\r\n      const leaf = document.createElement(\"i\");\r\n      leaf.className = `animate ${\r\n        leafs[Math.floor(Math.random() * (3 - 0 + 1)) + 0]\r\n      }`;\r\n      leaf.style.top = `${Math.floor(Math.random() * (10 - 0 + 1)) + 0}vh`;\r\n      leaf.style.left = `${Math.floor(Math.random() * (99 - 1 + 1)) + 1}vw`;\r\n      leaf.style.animationDelay = `${(Math.random() * (13 - 0 + 1) + 0).toFixed(\r\n        1\r\n      )}s`;\r\n      leaf.style.animationDuration = `${(\r\n        Math.random() * (11 - 9 + 1) +\r\n        9\r\n      ).toFixed(1)}s`;\r\n      leaf.style.color = `rgb(0,${Math.floor(Math.random() * (200 - 50 + 1)) +\r\n        50},0)`;\r\n      document.body.appendChild(leaf);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return <></>;\r\n  }\r\n}\r\n\r\nexport default AnimatedLeaf;\r\n","import React, { Component } from \"react\";\nimport \"../styles/app.sass\";\nimport Input from \"./Input.js\";\nimport Weather from \"./Weather.js\";\nimport AnimatedLeaf from \"./AnimatedLeaf\";\n\nclass WeatherApp extends Component {\n  state = {\n    weather: [],\n    city: \"Powiat warszawski zachodni\",\n    cityName: \"Warsaw\",\n    weatherSectionClass: \"weather\"\n  };\n  handleOptionChange = e => {\n    this.setState({\n      city: e.target.value\n    });\n  };\n  handleWeatherRender = e => {\n    e.preventDefault();\n    this.setState({\n      weather: [],\n      cityName: e.target.querySelector(\"select\").options[\n        e.target.querySelector(\"select\").options.selectedIndex\n      ].text,\n      weatherSectionClass: \"weather\"\n    });\n    fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${\n        this.state.city\n      },pl&units=metric&appid=6749543a09b33dd2d66d94a8d2dc1a1b`\n    )\n      .then(resp => {\n        return resp.json();\n      })\n      .then(data => {\n        let weather = this.state.weather.concat(data);\n        this.setState({ weather, weatherSectionClass: \"weather active\" });\n      });\n  };\n\n  render() {\n    return (\n      <section className=\"app\">\n        <Input\n          option={this.state.city}\n          change={this.handleOptionChange}\n          submit={this.handleWeatherRender}\n        />\n        <Weather\n          weather={this.state.weather}\n          cityName={this.state.cityName}\n          class={this.state.weatherSectionClass}\n        />\n        <AnimatedLeaf />\n      </section>\n    );\n  }\n}\n\nexport default WeatherApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.sass\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}